// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  organizations Organization[]
  accounts      Account[]
  sessions      Session[]
}

model Organization {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  name String
  jobs Job[]
}

model Job {
  id String @id @default(cuid())
  title String
  location String?
  salary Int?
  workplace String?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  applications Application[]
}

model Application {
  id          String   @id @default(cuid())
  name        String   // Applicant's name
  email       String   // Applicant's email
  resume      String?  // URL to the resume file or similar
  coverLetter String?
  status      String   @default("submitted") // e.g., submitted, reviewed, rejected, accepted
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
